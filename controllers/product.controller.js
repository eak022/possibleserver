const ProductModel = require("../models/Product");
const cloudinary = require("../utils/cloudinary"); 

// ‚úÖ Helper: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏•‡∏Ç‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö EAN-13 (check digit)
function calculateEan13CheckDigit(twelveDigits) {
  const digits = twelveDigits.split("").map(Number);
  const sum = digits.reduce((acc, digit, index) => acc + digit * (index % 2 === 0 ? 1 : 3), 0);
  const mod = sum % 10;
  return mod === 0 ? 0 : 10 - mod;
}

// üìå CREATE: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏ï)
exports.createProduct = async (req, res) => {
  try {
      const { 
          productName, 
          productDescription, 
          categoryId, 
          packSize, 
          productStatuses, 
          barcodePack, 
          barcodeUnit, 
          sellingPricePerUnit, 
          sellingPricePerPack
      } = req.body;

      // ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å FormData
      let initialLot = null;
      if (req.body['initialLot[quantity]'] && req.body['initialLot[quantity]'] > 0) {
          initialLot = {
              quantity: req.body['initialLot[quantity]'],
              purchasePrice: req.body['initialLot[purchasePrice]'],
              expirationDate: req.body['initialLot[expirationDate]'],
              lotNumber: req.body['initialLot[lotNumber]'] || null
          };
      }

      if (!req.file) {
          return res.status(400).json({ message: "Please upload a product image" });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
      const nameExists = await ProductModel.findOne({ productName });
      if (nameExists) {
        return res.status(400).json({ message: "‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" });
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö barcodePack ‡∏ã‡πâ‡∏≥
      if (barcodePack) {
        const barcodePackExists = await ProductModel.findOne({
          $or: [{ barcodePack }, { barcodeUnit: barcodePack }]
        });
        if (barcodePackExists) {
          return res.status(400).json({ message: "Barcode ‡πÅ‡∏û‡πá‡∏Ñ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
        }
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö barcodeUnit ‡∏ã‡πâ‡∏≥
      if (barcodeUnit) {
        const barcodeUnitExists = await ProductModel.findOne({
          $or: [{ barcodePack: barcodeUnit }, { barcodeUnit: barcodeUnit }]
        });
        if (barcodeUnitExists) {
          return res.status(400).json({ message: "Barcode ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
        }
      }

      // ‚úÖ ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ barcodePack ‡πÅ‡∏•‡∏∞ barcodeUnit ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
      if (barcodePack && barcodeUnit && barcodePack === barcodeUnit) {
        return res.status(400).json({ message: "‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏û‡πá‡∏Ñ‡πÅ‡∏•‡∏∞‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ä‡∏¥‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô" });
      }

      const newProduct = new ProductModel({
          productName,
          productDescription,
          productImage: req.file.path,
          categoryId,
          packSize,
          productStatuses: productStatuses ? [productStatuses] : [], // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array
          barcodePack,
          barcodeUnit,
          sellingPricePerUnit,
          sellingPricePerPack,
          lots: [] // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á
      });

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏£‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
      if (initialLot && initialLot.quantity > 0) {
          // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
          const lotData = {
              quantity: Number(initialLot.quantity),
              purchasePrice: Number(initialLot.purchasePrice),
              expirationDate: new Date(initialLot.expirationDate),
              lotNumber: initialLot.lotNumber || undefined
          };
          
          await newProduct.addLot(lotData);
      } else {
          await newProduct.save();
      }

      return res.status(201).json({ 
          message: "Product created successfully", 
          product: newProduct 
      });
  } catch (error) {
      console.error("Error creating product:", error);
      if (error.code === 11000) {
        return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î)" });
      }
      if (error.name === 'ValidationError') {
        return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: " + error.message });
      }
      return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: " + error.message });
  }
};

// üìå GENERATE: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö EAN-13 (prefix 20‚Äì29)
// Pattern 12 ‡∏´‡∏•‡∏±‡∏Å: 20 + ‡∏™‡∏≤‡∏Ç‡∏≤(2) + ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó(1:unit,2:pack) + YYMM(4) + running(3) ‚Üí ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì checksum ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà 13
exports.generateInternalBarcode = async (req, res) => {
  try {
    const { type, storeId } = req.body || {};

    if (!type || !["unit", "pack"].includes(type)) {
      return res.status(400).json({ message: "Invalid type. Must be 'unit' or 'pack'" });
    }

    const prefix = "20"; // ‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô
    const branchCode = (storeId || "00").toString().padStart(2, "0");
    const typeDigit = type === "unit" ? "1" : "2";
    const now = new Date();
    const yy = now.getFullYear().toString().slice(-2);
    const mm = (now.getMonth() + 1).toString().padStart(2, "0");
    const yymm = `${yy}${mm}`;

    // ‡∏•‡∏≠‡∏á‡∏ß‡∏¥‡πà‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö 000‚Äì999 ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ä‡∏ô‡πÉ‡∏ô DB
    for (let running = 0; running <= 999; running += 1) {
      const seq = running.toString().padStart(3, "0");
      const twelve = `${prefix}${branchCode}${typeDigit}${yymm}${seq}`; // ‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ 12 ‡∏´‡∏•‡∏±‡∏Å
      const check = calculateEan13CheckDigit(twelve);
      const code13 = `${twelve}${check}`;

      const exists = await ProductModel.findOne({
        $or: [{ barcodePack: code13 }, { barcodeUnit: code13 }],
      }).lean();

      if (!exists) {
        return res.status(200).json({ barcode: code13 });
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏±‡∏ô‡∏ô‡∏¥‡πà‡∏á 000‚Äì999 ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô
    return res.status(409).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ (000‚Äì999 ‡πÄ‡∏ï‡πá‡∏°)" });
  } catch (error) {
    return res.status(500).json({ message: error.message || "Server error while generating barcode" });
  }
};

// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getAllProducts = async (req, res) => {
  try {
    const products = await ProductModel.find()
      .populate("categoryId", "categoryName")
      .populate("productStatuses", "statusName statusColor");
    res.json(products);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching products.",
    });
  }
};

// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ ID
exports.getProductById = async (req, res) => {
  const { id } = req.params;
  try {
    const product = await ProductModel.findById(id)
      .populate("categoryId", "categoryName")
      .populate("productStatuses", "statusName statusColor");

    if (!product) {
      return res.status(404).send({
        message: "Product not found.",
      });
    }

    res.json(product);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching product by ID.",
    });
  }
};

// üìå UPDATE: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.updateProductImage = async (req, res) => {
  try {
    const { id } = req.params;
    const product = await ProductModel.findById(id);

    if (!product) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    if (!req.file) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
    }

    // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å Cloudinary
    if (product.productImage) {
      const publicId = product.productImage.split('/').pop().split('.')[0];
      await cloudinary.uploader.destroy(`products/${publicId}`);
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
    const updatedProduct = await ProductModel.findByIdAndUpdate(
      id,
      { productImage: req.file.path },
      { new: true }
    ).populate("categoryId", "categoryName")
     .populate("productStatuses", "statusName statusColor");

    res.status(200).json({
      message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      product: updatedProduct
    });
  } catch (error) {
    console.error("Error updating product image:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
  }
};

// üìå UPDATE: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.updateProductData = async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = { ...req.body };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    if (updateData.productName) {
      const nameExists = await ProductModel.findOne({ productName: updateData.productName, _id: { $ne: id } });
      if (nameExists) {
        return res.status(400).json({ message: "‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß" });
      }
    }

    // ‚úÖ ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ barcodePack ‡πÅ‡∏•‡∏∞ barcodeUnit ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (case: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏≠‡∏µ‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏î‡∏¥‡∏°)
    const currentProduct = await ProductModel.findById(id);
    if (!currentProduct) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }
    const nextBarcodePack = updateData.barcodePack !== undefined ? updateData.barcodePack : currentProduct.barcodePack;
    const nextBarcodeUnit = updateData.barcodeUnit !== undefined ? updateData.barcodeUnit : currentProduct.barcodeUnit;
    if (nextBarcodePack && nextBarcodeUnit && nextBarcodePack === nextBarcodeUnit) {
      return res.status(400).json({ message: "‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏û‡πá‡∏Ñ‡πÅ‡∏•‡∏∞‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ä‡∏¥‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô" });
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö barcodePack ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    if (updateData.barcodePack) {
      const barcodePackExists = await ProductModel.findOne({
        $or: [
          { barcodePack: updateData.barcodePack },
          { barcodeUnit: updateData.barcodePack }
        ],
        _id: { $ne: id }
      });
      if (barcodePackExists) {
        return res.status(400).json({ message: "Barcode ‡πÅ‡∏û‡πá‡∏Ñ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcode ‡πÅ‡∏û‡πá‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠ barcode ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô)" });
      }
    }
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö barcodeUnit ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    if (updateData.barcodeUnit) {
      const barcodeUnitExists = await ProductModel.findOne({
        $or: [
          { barcodePack: updateData.barcodeUnit },
          { barcodeUnit: updateData.barcodeUnit }
        ],
        _id: { $ne: id }
      });
      if (barcodeUnitExists) {
        return res.status(400).json({ message: "Barcode ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏≠‡∏≤‡∏à‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö barcode ‡πÅ‡∏û‡πá‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠ barcode ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô)" });
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
    if (req.file) {
      const product = await ProductModel.findById(id);
      if (!product) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
      }

      // ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å Cloudinary ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (product.productImage) {
        const publicId = product.productImage.split('/').pop().split('.')[0];
        await cloudinary.uploader.destroy(`products/${publicId}`);
      }

      updateData.productImage = req.file.path;
    }

    const updatedProduct = await ProductModel.findByIdAndUpdate(
      id,
      updateData,
      { new: true }
    ).populate("categoryId", "categoryName")
     .populate("productStatuses", "statusName statusColor");

    if (!updatedProduct) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    res.status(200).json({
      message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      product: updatedProduct
    });
  } catch (error) {
    if (error.code === 11000) {
      return res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î)" });
    }
    console.error("Error updating product:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
};

// üìå DELETE: ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.deleteProductById = async (req, res) => {
  const { id } = req.params;

  try {
    const product = await ProductModel.findById(id);
    if (!product) {
      return res.status(404).send({ message: "Product not found." });
    }

    // üìå ‡∏î‡∏∂‡∏á `public_id` ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å URL Cloudinary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏£‡∏π‡∏õ
    const imageUrl = product.productImage;
    if (imageUrl) {
      const publicId = imageUrl.split("/").pop().split(".")[0]; // ‡∏î‡∏∂‡∏á public_id ‡∏Ç‡∏≠‡∏á Cloudinary
      await cloudinary.uploader.destroy(`products/${publicId}`); // ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Cloudinary
    }

    // üìå ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await ProductModel.findByIdAndDelete(id);
    res.status(200).json({ message: "Product deleted successfully." });
  } catch (error) {
    console.log(error.message);
    res.status(500).send({ message: "Error occurred while deleting product." });
  }
};

// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit
exports.getProductByBarcode = async (req, res) => {
  const { barcode } = req.params; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ barcode ‡∏à‡∏≤‡∏Å URL

  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ barcode (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit ‡πÑ‡∏î‡πâ)
    const product = await ProductModel.findOne({
      $or: [{ barcodePack: barcode }, { barcodeUnit: barcode }] // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit
    })
      .populate("categoryId", "categoryName")
      .populate("productStatuses", "statusName statusColor");

    if (!product) {
      return res.status(404).send({
        message: "Product not found.",
      });
    }

    res.json(product);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching product by barcode.",
    });
  }
};

// ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏ï‡πÉ‡∏´‡∏°‡πà

// üìå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡πá‡∏≠‡∏ï‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.addLotToProduct = async (req, res) => {
  try {
    const { productId } = req.params;
    const { quantity, purchasePrice, expirationDate, lotNumber, purchaseOrderId } = req.body;

    const product = await ProductModel.findById(productId);
    if (!product) {
      return res.status(404).json({ message: "Product not found" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö lotNumber ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    if (lotNumber && product.lots.some(lot => lot.lotNumber === lotNumber)) {
      return res.status(400).json({ message: "Lot number already exists for this product" });
    }

    await product.addLot({
      quantity,
      purchasePrice,
      expirationDate,
      lotNumber,
      purchaseOrderId
    });

    return res.status(201).json({ 
      message: "Lot added successfully", 
      product: product 
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

// üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.getProductLots = async (req, res) => {
  try {
    const { productId } = req.params;
    const { status } = req.query; // filter by status (active, expired, disposed)

    const product = await ProductModel.findById(productId);
    if (!product) {
      return res.status(404).json({ message: "Product not found" });
    }

    let lots = product.lots;
    if (status) {
      lots = lots.filter(lot => lot.status === status);
    }

    return res.status(200).json({ 
      productName: product.productName,
      totalQuantity: product.totalQuantity,
      lots: lots 
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

// üìå ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡∏•‡πá‡∏≠‡∏ï
exports.updateLotQuantity = async (req, res) => {
  try {
    const { productId, lotNumber } = req.params;
    const { quantity, reason } = req.body;

    const product = await ProductModel.findById(productId);
    if (!product) {
      return res.status(404).json({ message: "Product not found" });
    }

    const lot = product.lots.find(l => l.lotNumber === lotNumber);
    if (!lot) {
      return res.status(404).json({ message: "Lot not found" });
    }

    if (quantity < 0) {
      return res.status(400).json({ message: "Quantity cannot be negative" });
    }

    lot.quantity = quantity;
    lot.lastModified = new Date();
    if (reason) lot.modificationReason = reason;

    await product.save();

    return res.status(200).json({ 
      message: "Lot quantity updated successfully", 
      lot: lot 
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

// üìå ‡∏ï‡∏±‡∏î‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏•‡πá‡∏≠‡∏ï
exports.disposeLot = async (req, res) => {
  try {
    const { productId, lotNumber } = req.params;
    const { reason } = req.body;

    const product = await ProductModel.findById(productId);
    if (!product) {
      return res.status(404).json({ message: "Product not found" });
    }

    await product.disposeLot(lotNumber, reason);

    return res.status(200).json({ 
      message: "Lot disposed successfully" 
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

// üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏ï
exports.checkStockAvailability = async (req, res) => {
  try {
    const { productId } = req.params;
    const { requiredQuantity } = req.query;

    const product = await ProductModel.findById(productId);
    if (!product) {
      return res.status(404).json({ message: "Product not found" });
    }

    const totalAvailable = product.totalQuantity;
    const isAvailable = totalAvailable >= parseInt(requiredQuantity);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const availableLots = product.lots
      .filter(lot => lot.status === 'active' && lot.quantity > 0)
      .sort((a, b) => new Date(a.expirationDate) - new Date(b.expirationDate));

    return res.status(200).json({
      productName: product.productName,
      totalAvailable,
      requiredQuantity: parseInt(requiredQuantity),
      isAvailable,
      availableLots,
      nearestExpiration: product.nearestExpirationDate
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô‡∏•‡πá‡∏≠‡∏ï
exports.updateLotDetails = async (req, res) => {
  try {
    const { productId, lotNumber } = req.params;
    const { purchasePrice, expirationDate, reason } = req.body;

    const product = await ProductModel.findById(productId);
    if (!product) {
      return res.status(404).json({ message: "Product not found" });
    }

    const lot = product.lots.find(l => l.lotNumber === lotNumber);
    if (!lot) {
      return res.status(404).json({ message: "Lot not found" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    if (purchasePrice !== undefined) {
      if (purchasePrice < 0) {
        return res.status(400).json({ message: "Purchase price cannot be negative" });
      }
      lot.purchasePrice = purchasePrice;
    }

    if (expirationDate !== undefined) {
      const newExpirationDate = new Date(expirationDate);
      if (isNaN(newExpirationDate.getTime())) {
        return res.status(400).json({ message: "Invalid expiration date format" });
      }
      lot.expirationDate = newExpirationDate;
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    lot.lastModified = new Date();
    if (reason) lot.modificationReason = reason;

    await product.save();

    return res.status(200).json({ 
      message: "Lot details updated successfully", 
      lot: lot,
      updatedProduct: product
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô, ‡∏£‡∏≤‡∏Ñ‡∏≤, ‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏)
exports.updateLotComplete = async (req, res) => {
  try {
    const { productId, lotNumber } = req.params;
    const { quantity, purchasePrice, expirationDate, reason } = req.body;

    const product = await ProductModel.findById(productId);
    if (!product) {
      return res.status(404).json({ message: "Product not found" });
    }

    const lot = product.lots.find(l => l.lotNumber === lotNumber);
    if (!lot) {
      return res.status(404).json({ message: "Lot not found" });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (quantity !== undefined) {
      if (quantity < 0) {
        return res.status(400).json({ message: "Quantity cannot be negative" });
      }
      lot.quantity = quantity;
    }

    if (purchasePrice !== undefined) {
      if (purchasePrice < 0) {
        return res.status(400).json({ message: "Purchase price cannot be negative" });
      }
      lot.purchasePrice = purchasePrice;
    }

    if (expirationDate !== undefined) {
      const newExpirationDate = new Date(expirationDate);
      if (isNaN(newExpirationDate.getTime())) {
        return res.status(400).json({ message: "Invalid expiration date format" });
      }
      lot.expirationDate = newExpirationDate;
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    lot.lastModified = new Date();
    if (reason) lot.modificationReason = reason;

    await product.save();

    return res.status(200).json({ 
      message: "Lot updated successfully", 
      lot: lot,
      updatedProduct: product
    });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};
