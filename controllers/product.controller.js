const ProductModel = require("../models/Product");

// üìå CREATE: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
exports.createProduct = async (req, res) => {
  const {
    productName,
    productDescription,
    productImage,
    categoryId,
    packSize,
    productStatus,
    barcodePack,
    barcodeUnit,
    quantity,
    purchasePrice,
    sellingPricePerUnit,
    sellingPricePerPack,
    expirationDate
  } = req.body;

  try {
    const newProduct = new ProductModel({
      productName,
      productDescription,
      productImage,
      categoryId,
      packSize,
      productStatus,
      barcodePack,
      barcodeUnit,
      quantity,
      purchasePrice,
      sellingPricePerUnit,
      sellingPricePerPack,
      expirationDate
    });

    const savedProduct = await newProduct.save();
    res.status(201).json(savedProduct);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while creating product.",
    });
  }
};

// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getAllProducts = async (req, res) => {
  try {
    const products = await ProductModel.find()
      .populate("categoryId", "categoryName")
      .populate("productStatus", "statusName");
    res.json(products);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching products.",
    });
  }
};

// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ ID
exports.getProductById = async (req, res) => {
  const { id } = req.params;
  try {
    const product = await ProductModel.findById(id)
      .populate("categoryId", "categoryName")
      .populate("productStatus", "statusName");

    if (!product) {
      return res.status(404).send({
        message: "Product not found.",
      });
    }

    res.json(product);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching product by ID.",
    });
  }
};

// üìå UPDATE: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID
exports.updateProductById = async (req, res) => {
  const { id } = req.params;
  const {
    productName,
    productDescription,
    productImage,
    categoryId,
    packSize,
    productStatus,
    barcodePack,
    barcodeUnit,
    quantity,
    purchasePrice,
    sellingPricePerUnit,
    sellingPricePerPack,
    expirationDate
  } = req.body;

  try {
    const updatedProduct = await ProductModel.findByIdAndUpdate(
      id,
      {
        productName,
        productDescription,
        productImage,
        categoryId,
        packSize,
        productStatus,
        barcodePack,
        barcodeUnit,
        quantity,
        purchasePrice,
        sellingPricePerUnit,
        sellingPricePerPack,
        expirationDate
      },
      { new: true } // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
    );

    if (!updatedProduct) {
      return res.status(404).send({
        message: "Product not found.",
      });
    }

    res.json(updatedProduct);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while updating product.",
    });
  }
};

// üìå DELETE: ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID
exports.deleteProductById = async (req, res) => {
  const { id } = req.params;

  try {
    const deletedProduct = await ProductModel.findByIdAndDelete(id);

    if (!deletedProduct) {
      return res.status(404).send({
        message: "Product not found.",
      });
    }

    res.status(200).json({
      message: "Product deleted successfully.",
    });
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while deleting product.",
    });
  }
};

// üìå READ: ‡∏î‡∏∂‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit
exports.getProductByBarcode = async (req, res) => {
  const { barcode } = req.params; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ barcode ‡∏à‡∏≤‡∏Å URL

  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢ barcode (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit ‡πÑ‡∏î‡πâ)
    const product = await ProductModel.findOne({
      $or: [{ barcodePack: barcode }, { barcodeUnit: barcode }] // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏° barcodePack ‡∏´‡∏£‡∏∑‡∏≠ barcodeUnit
    })
      .populate("categoryId", "categoryName")
      .populate("productStatus", "statusName");

    if (!product) {
      return res.status(404).send({
        message: "Product not found.",
      });
    }

    res.json(product);
  } catch (error) {
    console.log(error.message);
    res.status(500).send({
      message: "Error occurred while fetching product by barcode.",
    });
  }
};
