const CartModel = require("../models/Cart");
const ProductModel = require("../models/Product");
const PromotionModel = require("../models/Promotion");


exports.getAllCarts = async (req, res) => {
  try {
    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
    const currentUsername = req.user?.username;
    const carts = await CartModel.find({ userName: currentUsername });
    res.json(carts);
  } catch (error) {
    res
      .status(500)
      .json({ message: error.message || "Failed to get cart items." });
  }
};

// üìå POST /carts - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
exports.createCart = async (req, res) => {
  try {
    const { productId, quantity, pack, userName, barcode, promotionId } = req.body;
    const currentUsername = req.user?.username;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!productId || !quantity) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô' });
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏ß‡∏°‡∏£‡∏≠‡∏¢ userName
    if (userName && userName !== currentUsername) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÉ‡∏ô‡∏ô‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ' });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const product = await ProductModel.findById(productId);
    if (!product) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á (active + ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ + ‡∏°‡∏µ‡∏™‡∏ï‡πá‡∏≠‡∏Å)
    const now = new Date();
    const eligibleLots = (product.lots || []).filter(lot => lot.status === 'active' && lot.quantity > 0 && new Date(lot.expirationDate) > now);
    if (eligibleLots.length === 0) {
      return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢ (‡∏≠‡∏≤‡∏à‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å)' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡πÉ‡∏ä‡πâ totalQuantity)
    const requestedQuantity = pack ? quantity * product.packSize : quantity;
    if (requestedQuantity > product.totalQuantity) {
      return res.status(400).json({ 
        message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${product.totalQuantity} ${pack ? '‡πÅ‡∏û‡πá‡∏Ñ' : '‡∏ä‡∏¥‡πâ‡∏ô'}`
      });
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤ pack ‡πÄ‡∏õ‡πá‡∏ô true ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const price = pack ? product.sellingPricePerPack : product.sellingPricePerUnit;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÇ‡∏î‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° barcode ‡πÅ‡∏•‡∏∞ promotionId
    const existingItem = await CartModel.findOne({ productId, userName: currentUsername, barcode: barcode || (pack ? product.barcodePack : product.barcodeUnit), promotionId: promotionId || null });

    if (existingItem) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      const newTotalQuantity = pack ? 
        (existingItem.quantity + quantity) * product.packSize : 
        existingItem.quantity + quantity;

      if (newTotalQuantity > product.totalQuantity) {
        return res.status(400).json({ 
          message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${product.totalQuantity} ${pack ? '‡πÅ‡∏û‡πá‡∏Ñ' : '‡∏ä‡∏¥‡πâ‡∏ô'}`
        });
      }

      // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      existingItem.quantity += quantity;
      const updatedItem = await existingItem.save();
      return res.json(updatedItem);
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
      const cart = new CartModel({
      productId,
      name: product.productName,
      price,
      image: product.productImage,
      quantity,
      userName: currentUsername,
        pack,
        barcode: barcode || (pack ? product.barcodePack : product.barcodeUnit),
        promotionId: promotionId || null
    });

    const newItem = await cart.save();
    res.status(201).json(newItem);
  } catch (error) {
    console.error("Error during cart creation:", error);
    res.status(500).json({ message: error.message || "Something went wrong!" });
  }
};


  
  exports.getCartsByUserName = async (req, res) => {

  try {
    const { userName } = req.params;
    const currentUsername = req.user?.username;
    if (userName !== currentUsername) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' });
    }
    const carts = await CartModel.find({ userName });
    res.json(carts);
  } catch (error) {
    res
      .status(500)
      .json({ message: error.message || "Failed to get cart items." });
  }
};

  
  // üìå DELETE /cart/{userId} - ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
exports.deleteAllCarts = async (req, res) => {
    const { userName  } = req.params;
    const currentUsername = req.user?.username;
    if (userName !== currentUsername) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' });
    }
    try {
      const result = await CartModel.deleteMany({ userName });
  
      if (result.deletedCount > 0) {
        return res.json({ message: "All cart items removed!" });
      } else {
        return res.json({ message: "No cart items found." });
      }
    } catch (error) {
      res.status(500).json({ message: error.message || "Failed to delete cart items." });
    }
  };
  
  exports.updateCartById = async (req, res) => {
    try {
      const { id } = req.params;
      const { quantity, pack } = req.body;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á quantity ‡∏´‡∏£‡∏∑‡∏≠ pack ‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (quantity === undefined && pack === undefined) {
        return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢' });
      }

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      const cart = await CartModel.findById(id);
      if (!cart) {
        return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤' });
      }

      // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      const currentUsername = req.user?.username;
      if (cart.userName !== currentUsername) {
        return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' });
      }

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å
      const product = await ProductModel.findById(cart.productId);
      if (!product) {
        return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' });
      }

      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏û‡πá‡∏Ñ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô (‡πÇ‡∏õ‡∏£‡∏Ø ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏î‡πâ‡∏≤‡∏ô add-with-barcode)
      if (cart.promotionId && pack !== undefined && pack === true) {
        return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏û‡πá‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ' });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢
      const now = new Date();
      const eligibleLots = (product.lots || []).filter(lot => lot.status === 'active' && lot.quantity > 0 && new Date(lot.expirationDate) > now);
      if (eligibleLots.length === 0) {
        return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢ (‡∏≠‡∏≤‡∏à‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å)' });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å (‡πÉ‡∏ä‡πâ totalQuantity) ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏° pack ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
      const effectivePack = (pack !== undefined) ? pack : cart.pack;
      const effectiveQuantity = (quantity !== undefined) ? quantity : cart.quantity;
      const requestedQuantity = effectivePack ? effectiveQuantity * product.packSize : effectiveQuantity;
      if (requestedQuantity > product.totalQuantity) {
        return res.status(400).json({ 
          message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${product.totalQuantity} ‡∏´‡∏ô‡πà‡∏ß‡∏¢`
        });
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏û‡πá‡∏Ñ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
      if (quantity !== undefined) {
        if (quantity <= 0) {
          return res.status(400).json({ message: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0' });
        }
        cart.quantity = quantity;
      }
      if (pack !== undefined) {
        cart.pack = pack;
        cart.price = pack ? product.sellingPricePerPack : product.sellingPricePerUnit;
        cart.barcode = pack ? product.barcodePack : product.barcodeUnit;

        // ‡∏£‡∏ß‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ã‡πâ‡∏≥ (merge) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏µ‡πà key ‡∏ä‡∏ô‡∏Å‡∏±‡∏ô
        const duplicate = await CartModel.findOne({
          _id: { $ne: cart._id },
          userName: cart.userName,
          productId: cart.productId,
          barcode: cart.barcode,
          promotionId: cart.promotionId || null,
        });
        if (duplicate) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á merge ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const mergedQuantityUnits = cart.pack
            ? (cart.quantity + duplicate.quantity) * product.packSize
            : (cart.quantity + duplicate.quantity);
          if (mergedQuantityUnits > product.totalQuantity) {
            return res.status(400).json({
              message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å (${product.totalQuantity} ‡∏´‡∏ô‡πà‡∏ß‡∏¢)`
            });
          }
          cart.quantity = cart.quantity + duplicate.quantity;
          await duplicate.deleteOne();
        }
      }

      const updatedCart = await cart.save();
      res.json(updatedCart);
    } catch (error) {
      console.error("Error updating cart:", error);
      res.status(500).json({ message: error.message || "Something went wrong!" });
    }
  };
  
  
  // üìå DELETE /cart/{id} - ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID
exports.deleteCartById = async (req, res) => {
    try {
      const { id } = req.params;
      const currentUsername = req.user?.username;
      const item = await CartModel.findById(id);
      if (!item) {
        return res.status(404).json({ message: "Item not found!" });
      }
      if (item.userName !== currentUsername) {
        return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' });
      }
      await item.deleteOne();
      res.status(200).json({ message: "Item deleted successfully!" });
    } catch (error) {
      res.status(500).json({ message: error.message || "Failed to delete cart item." });
    }
  };
  
  exports.createCartWithBarcode = async (req, res) => {
    const { barcode, quantity, userName } = req.body;
    const currentUsername = req.user?.username;
    console.log("Received data:", req.body);

    if (!barcode || !quantity) {
      return res.status(400).json({ message: "Product information is missing!" });
    }
    if (userName && userName !== currentUsername) {
      return res.status(403).json({ message: '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' });
    }

    try {
      const now = new Date();
      // 1) ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô
      const promotion = await PromotionModel.findOne({ barcode }).lean();
      if (promotion) {
        if (!(new Date(promotion.validityStart) <= now && now <= new Date(promotion.validityEnd))) {
          return res.status(400).json({ message: "‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°" });
        }
        const product = await ProductModel.findById(promotion.productId);
        if (!product) return res.status(404).json({ message: "Product not found!" });

        let promoAvailableQty = product.totalQuantity; // fallback ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if (Array.isArray(promotion.appliedLots) && promotion.appliedLots.length > 0) {
          const eligibleLots = (product.lots || []).filter(l => l.status === 'active' && l.quantity > 0 && new Date(l.expirationDate) > now && promotion.appliedLots.includes(l.lotNumber));
          if (eligibleLots.length === 0) return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ" });
          promoAvailableQty = eligibleLots.reduce((sum, l) => sum + l.quantity, 0);
        }

        const pack = false; // ‡πÇ‡∏õ‡∏£‡∏Ø ‡∏Ç‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        const requestedQuantity = quantity;
        if (requestedQuantity > promoAvailableQty) {
          return res.status(400).json({ message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡∏Ø ‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${promoAvailableQty} ‡∏´‡∏ô‡πà‡∏ß‡∏¢` });
        }
        const price = promotion.discountedPrice;

        const existingItem = await CartModel.findOne({ productId: product._id, userName: currentUsername, barcode, promotionId: promotion._id });
        if (existingItem) {
          const newTotalQuantity = existingItem.quantity + quantity;
          if (newTotalQuantity > promoAvailableQty) {
            return res.status(400).json({ message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡∏Ø ‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${promoAvailableQty} ‡∏´‡∏ô‡πà‡∏ß‡∏¢` });
          }
          existingItem.quantity += quantity;
          const updatedItem = await existingItem.save();
          return res.json(updatedItem);
        }

        const cart = new CartModel({
          productId: product._id,
          name: product.productName,
          price,
          image: product.productImage,
          quantity,
          userName: currentUsername,
          pack,
          barcode,
          promotionId: promotion._id
        });
        const newItem = await cart.save();
        return res.status(201).json(newItem);
      }

      // 2) ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÅ‡∏û‡πá‡∏Ñ/‡∏ä‡∏¥‡πâ‡∏ô)
      const product = await ProductModel.findOne({ $or: [{ barcodePack: barcode }, { barcodeUnit: barcode }] });
      if (!product) return res.status(404).json({ message: "Product not found!" });

      const isPack = barcode === product.barcodePack;
      const pack = isPack;
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏ï‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢
      const eligibleLots = (product.lots || []).filter(l => l.status === 'active' && l.quantity > 0 && new Date(l.expirationDate) > now);
      if (eligibleLots.length === 0) {
        return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡πá‡∏≠‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢ (‡∏≠‡∏≤‡∏à‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å)' });
      }
      const requestedQuantity = pack ? quantity * product.packSize : quantity;
      if (requestedQuantity > product.totalQuantity) {
        return res.status(400).json({ message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${product.totalQuantity} ${pack ? '‡∏ä‡∏¥‡πâ‡∏ô' : '‡∏´‡∏ô‡πà‡∏ß‡∏¢'}` });
      }
      const price = pack ? product.sellingPricePerPack : product.sellingPricePerUnit;

      const existingItem = await CartModel.findOne({ productId: product._id, userName: currentUsername, barcode, promotionId: null });
      if (existingItem) {
        const newTotalQuantity = pack ? (existingItem.quantity + quantity) * product.packSize : existingItem.quantity + quantity;
        if (newTotalQuantity > product.totalQuantity) {
          return res.status(400).json({ message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏°‡∏µ‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${product.totalQuantity} ${pack ? '‡∏ä‡∏¥‡πâ‡∏ô' : '‡∏´‡∏ô‡πà‡∏ß‡∏¢'}` });
        }
        existingItem.quantity += quantity;
        const updatedItem = await existingItem.save();
        return res.json(updatedItem);
      }

      const cart = new CartModel({
        productId: product._id,
        name: product.productName,
        price,
        image: product.productImage,
        quantity,
        userName: currentUsername,
        pack,
        barcode,
        promotionId: null
      });
      const newItem = await cart.save();
      return res.status(201).json(newItem);
    } catch (error) {
      console.error("Error during cart creation:", error);
      res.status(500).json({ message: error.message || "Something went wrong!" });
    }
  };
  